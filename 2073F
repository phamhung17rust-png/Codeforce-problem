#include<bits/stdc++.h>
using namespace std;

#define int long long

const int N=1e5+1e3+7;

int n,m,q,l[N],p[N],s[N];

int ans[N];

struct Line {
    mutable int k,m,p;
    bool operator <(const Line &o) const {return k<o.k;}
    bool operator <(int x) const{return p<x;}
};

struct LineContainer:std::multiset<Line,std::less<>>
{
    const int inf=LLONG_MAX;
    int div(int a,int b)
    {
        return a/b-((a^b)<0&&a%b);
    }
    bool isect(iterator x,iterator y)
    {
        if(y==end())
        {
            x->p=inf;
            return false;
        }
        if(x->k==y->k)
            x->p=x->m>y->m?inf:-inf;
        else
            x->p=div(y->m-x->m,x->k-y->k);
        return x->p>=y->p;
    }
    void add(int k,int m)
    {
        k=-k,m=-m;
        auto z=insert({k,m,0}),y=z++,x=y;
        while(isect(y,z))
            z=erase(z);
        if(x!=begin()&&isect(--x,y))
            isect(x,y=erase(y));
        while((y=x)!=begin()&&(--x)->p>=y->p)
            isect(x,erase(y));
    }
    int qry(int x)
    {
        auto l=*lower_bound(x);
        return -(l.k*x+l.m);
    }
};

void solve()
{
    vector<int> qrs;
    for(int i=1;i<=q;i++)
        if(l[i]<p[n])
            qrs.push_back(i);
    if(!qrs.size())
        return;
    sort(qrs.begin(),qrs.end(),[&](auto u,auto v) {
        return l[u]>l[v];
    });
    for(auto x:qrs)
        ans[x]=min(ans[x],(p[n]-l[x])*s[n]);
    vector<int> id;
    for(int i=1;i<n;i++)
        if(p[i]<p[n])
            id.push_back(i);
    sort(id.begin(),id.end(),[&](auto x,auto y){
        return p[x]<p[y];
    });
    vector<int> z(id.size());
    vector<int> st={n};
    vector<int> w={0};
    multiset<int> ms;
    for(int i=(int)id.size()-1;i>=0;i--)
    {
        int x=id[i];
        while(st.size()>1&&s[x]<s[st.back()])
            st.pop_back(),w.pop_back();
        w.push_back(w.back()+s[x]*(p[st.back()]-p[x]));
        st.push_back(x);
        z[i]=w.back();
        ms.insert(z[i]);
    }
    LineContainer S;
    for(int i=1;i<n;i++)
        if(p[i]>=p[n])
            S.add(-2*s[i],s[i]*(p[n]+p[i]));
    int t=(int)id.size()-1;
    for(auto x:qrs)
    {
        int u=l[x];
        while(t>=0&&p[id[t]]>=u)
        {
            int x=id[t];
            ms.erase(ms.find(z[t]));
            S.add(-2*s[x],2*s[x]*p[x]+z[t]);
            t--;
        }
        if(ms.size())
            ans[x]=min(ans[x],*ms.begin());
        if(S.size())
            ans[x]=min(ans[x],S.qry(u));
    }
}

signed main()
{
    ios::sync_with_stdio(false);
    cin.tie(0);
    cin>>n>>m>>q;
    swap(n,m);
    for(int i=1;i<=n;i++)
        cin>>p[i]>>s[i];
    for(int i=1;i<=q;i++)
    {
        cin>>l[i];
        ans[i]=1e18;
        if(l[i]==p[n])
            ans[i]=0;
    }
    solve();
    for(int i=1;i<=q;i++)
        l[i]=m-l[i]+1;
    for(int i=1;i<=n;i++)
        p[i]=m-p[i]+1;
    solve();
    for(int i=1;i<=q;i++)
        cout<<ans[i]<<"\n";
}
