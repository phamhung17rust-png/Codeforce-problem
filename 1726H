#include <bits/stdc++.h>
const int maxn = 1 << 13;
const long double pi = acos(-1);
const long double eps = 1e-18;
struct point {int x, y;} p[maxn];
int n; long double a[maxn], ans;
long double sqr (long double x) {return x * x;}
long double X (long double a, long double t) {return sin(t - a) / sin(a) + cos(t - a) * sin(t) * cos(t) / sin(a);}
long double Y (long double a, long double t) {return cos(t - a) * sin(t) * sin(t) / sin(a);}
long double F (long double a, long double t) {return (sin(2 * (a - 3 * t)) - sin(2 * (a - 2 * t)) - 4 * sin(2 * (a - t)) - sin(2 * (a + t)) - 4 * t * cos(2 * a) + 8 * t - 2 * sin(4 * t)) / 64 / sin(a) / sin(a);}
signed main ()
{
scanf("%d", &n);
for (int i = 1; i <= n; i++) scanf("%d%d", &p[i].x, &p[i].y);
if (n == 4)
{
if (p[1].x == p[2].x and p[2].y == p[3].y and p[3].x == p[4].x and p[4].y == p[1].y)
if (abs(p[1].x - p[3].x) == 1 or abs(p[1].y - p[2].y) == 1) return !printf("%d\n", abs(p[1].x - p[3].x) * abs(p[1].y - p[2].y));
if (p[1].y == p[2].y and p[2].x == p[3].x and p[3].y == p[4].y and p[4].x == p[1].x)
if (abs(p[1].x - p[2].x) == 1 or abs(p[1].y - p[3].y) == 1) return !printf("%d\n", abs(p[1].x - p[2].x) * abs(p[1].y - p[3].y));
}
p[0] = p[n]; p[n + 1] = p[1]; p[n + 2] = p[2];
for (int i = 1; i <= n + 1; i++) a[i] = atan2(p[i - 1].y - p[i].y, p[i - 1].x - p[i].x) - atan2(p[i + 1].y - p[i].y, p[i + 1].x - p[i].x);
for (int i = 1; i <= n + 1; i++) if (a[i] < 0) a[i] += 2 * pi;
for (int i = 1; i <= n; i++) ans += F(a[i], pi) - F(a[i], a[i]) + cos(a[i]) * sin(a[i]) / 2;
for (int i = 1; i <= n; i++) if (abs(p[i + 1].x - p[i].x) <= 1 and abs(p[i + 1].y - p[i].y) <= 1)
{
long double len = p[i].x == p[i + 1].x or p[i].y == p[i + 1].y ? 1 : sqrt(2);
long double l1, r1, m1, l2, r2, m2, ang;
for (l1 = a[i], r1 = pi; r1 - l1 > eps; X(a[i], m1) + X(a[i + 1], l2) < len ? l1 = m1 : r1 = m1)
{
m1 = (l1 + r1) / 2; ang = atan2(Y(a[i], m1), len - X(a[i], m1));
for (l2 = a[i + 1], r2 = pi; r2 - l2 > eps; atan2(Y(a[i + 1], m2), X(a[i + 1], m2)) > ang ? l2 = m2 : r2 = m2) m2 = (l2 + r2) / 2;
}
ans -= F(a[i], pi) - F(a[i], m1) + F(a[i + 1], pi) - F(a[i + 1], m2);
}
return !printf("%.11Lf\n", ans);
}