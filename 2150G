#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const int N = 10005, mod = 998244353;
char s[N];
int fac[N], inv[N], sum[N], c0[N], c1[N];
int wow[N][N];
int qpow(int x, int y)
{
	int ans = 1;
	while(y)
	{
		if(y & 1)
			ans = (ll)ans * x % mod;
		x = (ll)x * x % mod;
		y >>= 1;
	}
	return ans;
}
void prep(int n)
{
	int i, j;
	fac[0] = 1;
	for(i = 1; i <= n; i++)
		fac[i] = (ll)fac[i - 1] * i % mod;
	inv[n] = qpow(fac[n], mod - 2);
	for(i = n; i >= 1; i--)
		inv[i - 1] = (ll)inv[i] * i % mod;
	for(i = 0; i <= n; i++)
	{
		wow[i][0] = 1;
		for(j = 1; j <= i; j++)
			wow[i][j] = (wow[i - 1][j] + wow[i - 1][j - 1]) % mod;
	}
	for(i = 0; i <= n; i++)
		for(j = 1; j <= i; j++)
			wow[i][j] = (wow[i][j] + wow[i][j - 1]) % mod;
}
int C(int x, int y)
{
	return (x < y || y < 0) ? 0 : ((ll)fac[x] * inv[y] % mod * inv[x - y] % mod);
}
int csum(int x, int l, int r)
{
	l = max(l, 0);
	r = min(r, x);
	if(l > r)
		return 0;
	return (wow[x][r] + mod - wow[x][l - 1]) % mod;
}
int main()
{
	prep(10000);
	int t, x, y, k, i, j, ans, p, m, u, v, w, L, R, l, r, tmp;
	scanf("%d", &t);
	while(t--)
	{
		scanf("%d%d%d", &x, &y, &k);
		scanf("%s", s + 1);
		ans = 0;
		for(i = 1; i <= x + y; i++)
		{
			sum[i] = sum[i - 1] + (s[i] == '0') - (s[i] == '1');
			c0[i] = c0[i - 1] + (s[i] == '0');
			c1[i] = c1[i - 1] + (s[i] == '1');
		}
		m = p = 0;
		while(p <= x + y && (m = max(m, sum[p])) + c1[p] < k)
			p++;
		m = 0;
		for(i = p + 1; i <= x + y; m = max(m, sum[i++] - sum[p]))
			if(s[i] == '0')
			{
				u = x - c0[p];
				v = y - c1[p];
				if(m + v >= k || u >= k)
					ans = (ans + C(u + v - i + p, u - c0[i - 1] + c0[p])) % mod;
				else
					ans = (ans + C(u + v - i + p, k - c0[i - 1] + c0[p])) % mod;
			}
		m = 0;
		for(i = 1; i <= min(p, x + y); m = max(m, sum[i++]))
			if(s[i] == '0')
				for(j = i; j <= x + y; j++)
				{
					w = (C(x + y - j, k) + mod - 2 * C(x + y - j - 1, k) % mod) % mod;
					L = max(x - k, 0);
					R = min(k - y + j, j);
					l = max(m + j - k + 1, L);
					r = min(k - 1, R);
					tmp = csum(j - i, L - c0[i - 1], R - c0[i - 1]);
					tmp = (tmp + mod - csum(j - i, l - c0[i - 1], r - c0[i - 1])) % mod;
					tmp = (tmp + (ll)max(r - l + 1, 0) * C(j - i, k - c0[i - 1])) % mod;
					ans = (ans + (ll)tmp * w) % mod;
				}
		printf("%d\n", ans);
	}
	return 0;
}
