#include <stdio.h>
#include <string.h>
#include <sys/time.h>

#define N	300

int max(int a, int b) { return a > b ? a : b; }

unsigned int X;

void srand_() {
	struct timeval tv;

	gettimeofday(&tv, NULL);
	X = tv.tv_sec ^ tv.tv_usec | 1;
}

int rand_() {
	return (X *= 3) >> 1;
}

long long aa[N + 1];

void sort(int *ii, int l, int r) {
	while (l < r) {
		int i = l, j = l, k = r, i_ = ii[l + rand_() % (r - l)], tmp;

		while (j < k)
			if (aa[ii[j]] == aa[i_])
				j++;
			else if (aa[ii[j]] < aa[i_]) {
				tmp = ii[i], ii[i] = ii[j], ii[j] = tmp;
				i++, j++;
			} else {
				k--;
				tmp = ii[j], ii[j] = ii[k], ii[k] = tmp;
			}
		sort(ii, l, i);
		l = k;
	}
}

int main() {
	int t;

	srand_();
	scanf("%d", &t);
	while (t--) {
		static int ii[N + 1], prev[N + 1][N + 1], next[N + 1][N + 1], dr[N + 1][N + 1][N + 1], dp[N + 1][N + 1], dq[N + 1][N + 1];
		int n, i, i_, j, j_, k, a, b, ans;

		scanf("%d", &n);
		aa[0] = 0;
		for (i = 1; i <= n; i++) {
			scanf("%lld", &aa[i]);
			aa[i] += aa[i - 1];
		}
		for (i = 0; i <= n; i++)
			ii[i] = i;
		sort(ii, 0, n + 1);
		for (i = 0, a = 0; i <= n; i++)
			aa[ii[i]] = i == n || aa[ii[i + 1]] != aa[ii[i]] ? a++ : a;
		for (i = 0; i <= n; i++)
			for (a = 0; a <= n; a++)
				prev[i][a] = aa[i] == a ? i : (i == 0 ? -1 : prev[i - 1][a]);
		for (i = n; i >= 0; i--)
			for (a = 0; a <= n; a++)
				next[i][a] = aa[i] == a ? i : (i == n ? n + 1 : next[i + 1][a]);
		for (i = n; i >= 0; i--) {
			a = aa[i];
			for (j = i; j <= n; j++)
				if (aa[j] == a) {
					memset(dr[i][j], -1, (n + 1) * sizeof *dr[i][j]);
					for (b = 0; b < a; b++) {
						i_ = next[i][b], j_ = prev[j][b];
						if (i_ <= j_)
							dr[i][j][b] = max(dr[i][j][b], dr[i_][j_][a - 1] + 2);
					}
					for (b = a + 1; b <= n; b++) {
						i_ = next[i][b], j_ = prev[j][b];
						if (i_ <= j_)
							dr[i][j][b] = max(dr[i][j][b], dr[i_][j_][a + 1] + 2);
					}
					if (i == j)
						dr[i][j][a] = 0;
					else {
						i_ = next[i + 1][a];
						dr[i][j][a] = dr[i_][j][a] + 1;
					}
					for (k = i + 1; k < j; k++) {
						b = aa[k];
						if (b != a) {
							i_ = prev[k][a], j_ = next[k][a];
							if (i_ != i)
								dr[i][j][b] = max(dr[i][j][b], dr[i][i_][b] + dr[i_][j][b]);
							if (j_ != j)
								dr[i][j][b] = max(dr[i][j][b], dr[i][j_][b] + dr[j_][j][b]);
						}
					}
					for (b = a - 1; b >= 0; b--)
						dr[i][j][b] = max(dr[i][j][b], dr[i][j][b + 1]);
					for (b = a + 1; b <= n; b++)
						dr[i][j][b] = max(dr[i][j][b], dr[i][j][b - 1]);
				}
		}
		for (j = 0; j <= n; j++) {
			a = aa[j];
			memset(dp[j], -1, (n + 1) * sizeof *dp[j]);
			if (j == 0)
				dp[j][a] = 0;
			else {
				for (i = j - 1; i >= 0; i--) {
					b = aa[i], k = prev[j][b];
					if (b < a) {
						if (dp[i][a - 1] != -1)
							dp[j][b] = max(dp[j][b], dr[i][k][a - 1] + dp[i][a - 1] + 1);
					} else if (b > a) {
						if (dp[i][a + 1] != -1)
							dp[j][b] = max(dp[j][b], dr[i][k][a + 1] + dp[i][a + 1] + 1);
					}
				}
				if (a == aa[0]) {
					i = prev[j - 1][a];
					dp[j][a] = dp[i][a] + 1;
				}
			}
			for (b = a - 1; b >= 0; b--)
				dp[j][b] = max(dp[j][b], dp[j][b + 1]);
			for (b = a + 1; b <= n; b++)
				dp[j][b] = max(dp[j][b], dp[j][b - 1]);
		}
		for (i = n; i >= 0; i--) {
			a = aa[i];
			memset(dq[i], -1, (n + 1) * sizeof *dq[i]);
			if (i == n)
				dq[i][a] = 0;
			else {
				for (j = i + 1; j <= n; j++) {
					b = aa[j], k = next[i][b];
					if (b < a) {
						if (dq[j][a - 1] != -1)
							dq[i][b] = max(dq[i][b], dr[k][j][a - 1] + dq[j][a - 1] + 1);
					} else if (b > a) {
						if (dq[j][a + 1] != -1)
							dq[i][b] = max(dq[i][b], dr[k][j][a + 1] + dq[j][a + 1] + 1);
					}
				}
				if (a == aa[n]) {
					j = next[i + 1][a];
					dq[i][a] = dq[j][a] + 1;
				}
			}
			for (b = a - 1; b >= 0; b--)
				dq[i][b] = max(dq[i][b], dq[i][b + 1]);
			for (b = a + 1; b <= n; b++)
				dq[i][b] = max(dq[i][b], dq[i][b - 1]);
		}
		ans = 0;
		for (i = 0; i <= n; i++)
			for (j = i; j <= n; j++)
				if (aa[i] == aa[j] && dp[i][n] != -1 && dq[j][n] != -1)
					ans = max(ans, dp[i][n] + dr[i][j][n] + dq[j][n]);
		printf("%d\n", ans);
	}
	return 0;
}